version: '3.8'

services:
  nginx:
    container_name: nginx
    build:
      context: ./nginx
      args:
        configdir: nginx
    image: nginx-server:0.1
    restart: always
    ports:
      - 80:80
      - 443:443
    expose:
      - 9200
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - fastapi
    networks:
      - backend

  fastapi:
    container_name: fastapi
    build:
      context: .
    image: fastapi:0.1
    command: ./run_commands/gunicorn.sh
    healthcheck:
      test: ["CMD", "curl", "localhost:8000"]
      interval: 1m
      timeout: 5s
    restart: always
    expose:
      - 8000
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend

  db:
    container_name: postgres
    image: postgres:14-alpine
    restart: always
    healthcheck:
      test: pg_isready
      interval: 3s
      timeout: 6s
    expose:
      - 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - backend

  redis:
    container_name: redis
    image: redis:7.2-alpine
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 1m
      timeout: 5s
    expose:
      - 6379
    networks:
      - backend

  celery-worker:
    container_name: celery-worker
    build:
      context: .
    restart: always
    image: celery-worker:0.1
    command: ./run_commands/celery-worker.sh
    depends_on:
      - redis
    networks:
      - backend

  celery-beat:
    container_name: celery-beat
    build:
      context: .
    image: celery-beat:0.1
    command: ./run_commands/celery-beat.sh
    depends_on:
      - celery-worker
    networks:
      - backend

  flower:
    container_name: flower
    build:
      context: .
    image: flower:0.1
    restart: always
    command: ./run_commands/flower.sh
    ports:
      - 5555:5555
    networks:
      - backend

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    networks:
      - backend

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    expose:
      - 8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
      - redis
    networks:
      - backend

  nginx-exporter:
    container_name: nginx-exporter
    build: ./nginx/exporter
    image: nginx-exporter:0.1
    command:
      - --target.host=nginx
      - --target.port=9200
      - --target.log=/var/log/nginx/monitor.log
    expose:
      - 9150
    volumes:
      - nginx_logs:/var/log/nginx
    depends_on:
      - nginx
    networks:
      - backend

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.37.9
    restart: always
    ports:
      - 9090:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.retention.time=3d
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - backend

  grafana:
    image: grafana/grafana-oss:10.2.2
    container_name: grafana
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
    restart: always
    networks:
      - backend

volumes:
  nginx_logs:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  backend:
    driver: bridge
